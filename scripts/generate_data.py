# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

from faker import Faker
import json
import os
import random
import sys
from datetime import datetime, timedelta


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö.
def setup_environment():
    try:
        data_path = '/opt/airflow/generated_data'  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ generated_data –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Airflow.

        os.makedirs(data_path, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
        for i in range(7):
            date = datetime.now() - timedelta(days=i)
            timestamp = date.strftime("%d-%m-%Y")
            timestamp_folder = os.path.join(data_path, timestamp)
            os.makedirs(timestamp_folder, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {timestamp}")

        print(f"üìÅ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
        return data_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
        print("üí° –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ Airflow –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
        print("   docker-compose exec airflow-webserver python /opt/airflow/scripts/generate_data.py")
        sys.exit(1)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
def generate_user_profiles(num_users=150):
    fake = Faker("ru_RU")
    users = []

    for i in range(1, num_users + 1):
        user = {
            'user_id': f'user_{i:03d}',  # user_001, user_002, ...
            'name': fake.name(),
            'email': fake.email(),
            'city': fake.city(),
            'phone': fake.phone_number(),
            'registration_date': fake.date_this_year().isoformat()
        }
        users.append(user)

    print(f"üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    return users


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
def generate_user_behavior(num_events=1000, num_users=150):
    fake = Faker("ru_RU")
    event_types = ['session_start', 'click', 'page_view', 'purchase', 'logout']
    devices = ['desktop_windows', 'macos', 'android', 'ios']
    user_ids = [f'user_{i:03d}' for i in range(1, num_users + 1)]

    events = []
    for _ in range(num_events):
        # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
        days_ago = random.randint(0, 6)
        event_date = datetime.now() - timedelta(days=days_ago)

        event = {
            'timestamp': (event_date - timedelta(
                hours=random.randint(0, 23),
                minutes=random.randint(0, 59)
            )).strftime('%Y-%m-%d %H:%M:%S'),
            'event_type': random.choice(event_types),
            'user_id': random.choice(user_ids),
            'device': random.choice(devices),
            'session_id': f"sess_{random.randint(1000, 9999)}",
            'page_url': fake.uri() if random.random() > 0.3 else None
        }
        events.append(event)

    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    return events


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª—ã –ø–æ –¥–Ω—è–º.
def save_data_to_multiple_days(data, filename, base_folder):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–ø–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç"""
    try:
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ timestamp) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Å–µ –ø–∞–ø–∫–∏.
        if 'timestamp' not in data[0]:
            for folder in os.listdir(base_folder):
                folder_path = os.path.join(base_folder, folder)
                if os.path.isdir(folder_path):
                    filepath = os.path.join(folder_path, filename)
                    with open(filepath, 'w', encoding='utf-8') as file:
                        json.dump(data, file, ensure_ascii=False, indent=2)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {folder}/{filename}")
            return

        # –î–ª—è —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º.
        events_by_date = {}
        for item in data:
            event_date = datetime.strptime(item['timestamp'], '%Y-%m-%d %H:%M:%S')
            date_str = event_date.strftime("%d-%m-%Y")

            if date_str not in events_by_date:
                events_by_date[date_str] = []
            events_by_date[date_str].append(item)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º.
        for date_str, date_events in events_by_date.items():
            folder_path = os.path.join(base_folder, date_str)
            if os.path.exists(folder_path):
                filepath = os.path.join(folder_path, filename)
                with open(filepath, 'w', encoding='utf-8') as file:
                    json.dump(date_events, file, ensure_ascii=False, indent=2)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {date_str}/{filename} ({len(date_events)} —Å–æ–±—ã—Ç–∏–π)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")


def main():
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    output_folder = setup_environment()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
    users = generate_user_profiles(150)
    events = generate_user_behavior(1000, 150)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º.
    save_data_to_multiple_days(users, 'user_profiles.json', output_folder)
    save_data_to_multiple_days(events, 'user_behavior_events.json', output_folder)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"   ‚Ä¢ –°–æ–±—ã—Ç–∏–π: {len(events)}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Å–æ–±—ã—Ç–∏–π: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    print(f"   ‚Ä¢ –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {output_folder}")
    print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()